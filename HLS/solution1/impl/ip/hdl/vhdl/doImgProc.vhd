-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doImgProc is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_KERNEL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_KERNEL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_KERNEL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_RREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_KERNEL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_BREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of doImgProc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doImgProc,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.340000,HLS_SYN_LAT=2756864,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=9,HLS_SYN_FF=1038,HLS_SYN_LUT=1361}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_pp0_stg4_fsm_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_pp0_stg5_fsm_6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_pp0_stg6_fsm_7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_pp0_stg7_fsm_8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_pp0_stg8_fsm_9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_st17_fsm_10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_4AC41 : STD_LOGIC_VECTOR (18 downto 0) := "1001010110001000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110111";
    constant ap_const_lv19_2B9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001010111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_2B9 : STD_LOGIC_VECTOR (9 downto 0) := "1010111001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2B7 : STD_LOGIC_VECTOR (9 downto 0) := "1010110111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal doImgProc_CRTL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal doImgProc_KERNEL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal tmp_id_V_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal countWait_reg_497 : STD_LOGIC_VECTOR (18 downto 0);
    signal reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_1290 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_160 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg4_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_172 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg7_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_193 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg5_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal tmp_12_reg_1332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1332_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_outStream_TREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg8_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_222 : BOOLEAN;
    signal lineBuff_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_527 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_234 : BOOLEAN;
    signal lineBuff_val_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg6_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_255 : BOOLEAN;
    signal kernel_addr_gep_fu_215_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_reg_1230 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_1_gep_fu_223_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_1_reg_1235 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_2_gep_fu_231_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_2_reg_1240 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_3_gep_fu_239_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_3_reg_1245 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_4_gep_fu_247_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_4_reg_1250 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_5_gep_fu_255_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_5_reg_1255 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_6_gep_fu_263_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_6_reg_1260 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_7_gep_fu_271_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_7_reg_1265 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_8_gep_fu_279_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_addr_8_reg_1270 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp2_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_1280 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_reg_1285 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1290_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1294 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_addr_reg_1299 : STD_LOGIC_VECTOR (9 downto 0);
    signal lineBuff_val_2_addr_reg_1304 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_cond_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1309 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_1_fu_622_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_fu_630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_reg_1327 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_644_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal phitmp_reg_1336 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_keep_V_1_reg_1341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_keep_V_1_reg_1341_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_1_reg_1347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_strb_V_1_reg_1347_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_1_reg_1353 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_user_V_1_reg_1353_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_1_reg_1359 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_id_V_1_reg_1359_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_1_reg_1365 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_dest_V_1_reg_1365_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixConvolved_3_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_3_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_2_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_2_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_1415 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp3_reg_1415_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_1420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp6_reg_1420_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixConvolved_2_fu_739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal lineBuff_val_0_load_1_reg_1435 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_1_reg_1445 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_2_reg_1450 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_1_reg_1460 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_2_reg_1465 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_0_fu_760_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_0_reg_1475 : STD_LOGIC_VECTOR (15 downto 0);
    signal lineBuff_val_1_load_3_reg_1480 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_3_reg_1485 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_766_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1490 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_783_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1498 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_788_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_1503 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_2_fu_800_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_2_reg_1511 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_806_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_1516 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_fu_817_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_0_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_1_0_2_i_fu_838_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_0_2_i_reg_1529 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_845_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_1535 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_0_2_i_fu_864_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_0_2_i_reg_1543 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_878_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_1_reg_1549 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_1_1_i_fu_888_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_1_i_reg_1554 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_894_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_1560 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_1_i_fu_902_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_1_i_reg_1568 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_2_fu_915_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_2_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_1_1_1_i_fu_925_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_1_1_i_reg_1579 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_931_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_1585 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_1_1_i_fu_939_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_1_1_i_reg_1593 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_fu_952_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_0_reg_1599 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_1_1_2_i_fu_962_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_1_2_i_reg_1604 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_968_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_1610 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_1_2_i_fu_976_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_1_2_i_reg_1618 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_995_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1624 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_1_2_i_fu_1004_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_2_i_reg_1629 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_1010_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_reg_1635 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_2_i_fu_1018_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_2_i_reg_1643 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_1031_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_reg_1649 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_1041_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_1654 : STD_LOGIC_VECTOR (15 downto 0);
    signal valInWindow_0_minVal_1_2_1_i_fu_1050_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_2_1_i_reg_1659 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1056_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_reg_1665 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_2_1_i_fu_1064_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_1_2_1_i_reg_1673 : STD_LOGIC_VECTOR (7 downto 0);
    signal valOutput_fu_1084_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal valOutput_reg_1679 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_1684 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1689 : STD_LOGIC_VECTOR (12 downto 0);
    signal sel_tmp10_fu_1134_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp10_reg_1694 : STD_LOGIC_VECTOR (7 downto 0);
    signal countWait_2_fu_1217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_522 : BOOLEAN;
    signal exitcond_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lineBuff_val_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lineBuff_val_0_ce0 : STD_LOGIC;
    signal lineBuff_val_0_we0 : STD_LOGIC;
    signal lineBuff_val_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lineBuff_val_0_ce1 : STD_LOGIC;
    signal lineBuff_val_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lineBuff_val_1_ce0 : STD_LOGIC;
    signal lineBuff_val_1_we0 : STD_LOGIC;
    signal lineBuff_val_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lineBuff_val_1_ce1 : STD_LOGIC;
    signal lineBuff_val_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lineBuff_val_2_ce0 : STD_LOGIC;
    signal lineBuff_val_2_we0 : STD_LOGIC;
    signal lineBuff_val_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lineBuff_val_2_ce1 : STD_LOGIC;
    signal col_assign_phi_fu_467_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_phi_fu_478_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_phi_fu_489_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal countWait_phi_fu_501_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal countWait_1_reg_508 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_0_1_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_0_2_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_fu_1204_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_last_V_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_outStream_TREADY : STD_LOGIC := '0';
    signal tmp_3_fu_566_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_582_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_2_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_1_fu_732_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_val_0_0_fu_760_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_0_fu_760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_fu_777_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_fu_777_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_fu_777_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_2_fu_800_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_2_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_fu_817_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_fu_817_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_1_i_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_minVal_1_0_1_i_fu_827_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_2_i_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_0_1_i_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_maxVal_1_0_1_i_fu_853_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_0_2_i_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_1_1_fu_878_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_878_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_i_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_1_i_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_1_2_fu_915_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_2_fu_915_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_1_i_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_1_1_i_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_0_fu_952_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_fu_952_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_1_2_i_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_1_2_i_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_1_fu_989_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_fu_989_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_fu_989_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_i_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_2_i_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_2_fu_1031_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_1031_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_1037_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_1_i_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_2_1_i_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1070_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_1074_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_1079_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_2_i_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_2_2_i_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_maxVal_1_2_2_i_fu_1121_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_1_2_2_i_fu_1111_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp_fu_1127_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_tr_fu_1141_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_neg_fu_1144_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_1150_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_cast_fu_1160_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_1164_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_1167_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_cast_fu_1173_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal valOutput_1_fu_1177_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_1188_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1184_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_1196_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal window_val_0_0_fu_760_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_1_fu_777_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_2_fu_800_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_0_fu_817_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_1_fu_878_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_2_fu_915_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_0_fu_952_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_1_fu_989_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_fu_1031_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_bdd_1214 : BOOLEAN;

    component doImgProc_lineBuff_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component doImgProc_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doImgProc_KERNEL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        kernel_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : IN STD_LOGIC;
        kernel_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    doImgProc_CRTL_BUS_s_axi_U : component doImgProc_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => doImgProc_CRTL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        operation => operation);

    doImgProc_KERNEL_BUS_s_axi_U : component doImgProc_KERNEL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_KERNEL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_KERNEL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_KERNEL_BUS_AWVALID,
        AWREADY => s_axi_KERNEL_BUS_AWREADY,
        AWADDR => s_axi_KERNEL_BUS_AWADDR,
        WVALID => s_axi_KERNEL_BUS_WVALID,
        WREADY => s_axi_KERNEL_BUS_WREADY,
        WDATA => s_axi_KERNEL_BUS_WDATA,
        WSTRB => s_axi_KERNEL_BUS_WSTRB,
        ARVALID => s_axi_KERNEL_BUS_ARVALID,
        ARREADY => s_axi_KERNEL_BUS_ARREADY,
        ARADDR => s_axi_KERNEL_BUS_ARADDR,
        RVALID => s_axi_KERNEL_BUS_RVALID,
        RREADY => s_axi_KERNEL_BUS_RREADY,
        RDATA => s_axi_KERNEL_BUS_RDATA,
        RRESP => s_axi_KERNEL_BUS_RRESP,
        BVALID => s_axi_KERNEL_BUS_BVALID,
        BREADY => s_axi_KERNEL_BUS_BREADY,
        BRESP => s_axi_KERNEL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => doImgProc_KERNEL_BUS_s_axi_U_ap_dummy_ce,
        kernel_address0 => kernel_address0,
        kernel_ce0 => kernel_ce0,
        kernel_q0 => kernel_q0);

    lineBuff_val_0_U : component doImgProc_lineBuff_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 696,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_0_address0,
        ce0 => lineBuff_val_0_ce0,
        we0 => lineBuff_val_0_we0,
        d0 => lineBuff_val_0_d0,
        q0 => lineBuff_val_0_q0,
        address1 => lineBuff_val_0_address1,
        ce1 => lineBuff_val_0_ce1,
        q1 => lineBuff_val_0_q1);

    lineBuff_val_1_U : component doImgProc_lineBuff_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 696,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_1_address0,
        ce0 => lineBuff_val_1_ce0,
        we0 => lineBuff_val_1_we0,
        d0 => lineBuff_val_1_d0,
        q0 => lineBuff_val_1_q0,
        address1 => lineBuff_val_1_address1,
        ce1 => lineBuff_val_1_ce1,
        q1 => lineBuff_val_1_q1);

    lineBuff_val_2_U : component doImgProc_lineBuff_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 696,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_2_address0,
        ce0 => lineBuff_val_2_ce0,
        we0 => lineBuff_val_2_we0,
        d0 => lineBuff_val_2_d0,
        q0 => lineBuff_val_2_q0,
        address1 => lineBuff_val_2_address1,
        ce1 => lineBuff_val_2_ce1,
        q1 => lineBuff_val_2_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_outStream_TREADY assign process. --
    ap_reg_ioackin_outStream_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2) and not(((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_lv1_0 = exitcond_fu_1211_p2)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY)))))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_1 = outStream_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2) and (ap_const_logic_1 = outStream_TREADY)))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_554_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9) and not((exitcond1_reg_1290 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- col_assign_reg_463 assign process. --
    col_assign_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                col_assign_reg_463 <= idxCol_1_reg_1322;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                col_assign_reg_463 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- countWait_1_reg_508 assign process. --
    countWait_1_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_554_p2)))) then 
                countWait_1_reg_508 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2) and not(((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_lv1_0 = exitcond_fu_1211_p2))))) then 
                countWait_1_reg_508 <= countWait_2_fu_1217_p2;
            end if; 
        end if;
    end process;

    -- countWait_reg_497 assign process. --
    countWait_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                countWait_reg_497 <= phitmp_reg_1336;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                countWait_reg_497 <= ap_const_lv19_1;
            end if; 
        end if;
    end process;

    -- idxRow_reg_474 assign process. --
    idxRow_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                idxRow_reg_474 <= idxRow_1_reg_1327;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                idxRow_reg_474 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- pixConvolved_reg_485 assign process. --
    pixConvolved_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then 
                pixConvolved_reg_485 <= pixConvolved_2_reg_1430;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                pixConvolved_reg_485 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- reg_527 assign process. --
    reg_527_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_1214) then
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) then 
                    reg_527 <= lineBuff_val_0_q1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    reg_527 <= lineBuff_val_0_q0;
                end if;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond1_reg_1290_pp0_it1 <= exitcond1_reg_1290;
                ap_reg_ppstg_tmp_12_reg_1332_pp0_it1 <= tmp_12_reg_1332;
                exitcond1_reg_1290 <= exitcond1_fu_554_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then
                ap_reg_ppstg_sel_tmp3_reg_1415_pp0_it1 <= sel_tmp3_reg_1415;
                ap_reg_ppstg_sel_tmp6_reg_1420_pp0_it1 <= sel_tmp6_reg_1420;
                ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1 <= sel_tmp9_reg_1425;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)))) then
                ap_reg_ppstg_tmp_dest_V_1_reg_1365_pp0_it1 <= tmp_dest_V_1_reg_1365;
                ap_reg_ppstg_tmp_id_V_1_reg_1359_pp0_it1 <= tmp_id_V_1_reg_1359;
                ap_reg_ppstg_tmp_keep_V_1_reg_1341_pp0_it1 <= tmp_keep_V_1_reg_1341;
                ap_reg_ppstg_tmp_strb_V_1_reg_1347_pp0_it1 <= tmp_strb_V_1_reg_1347;
                ap_reg_ppstg_tmp_user_V_1_reg_1353_pp0_it1 <= tmp_user_V_1_reg_1353;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                col_assign_1_0_2_reg_1390 <= col_assign_1_0_2_fu_694_p2;
                sel_tmp3_reg_1415 <= sel_tmp3_fu_706_p2;
                sel_tmp6_reg_1420 <= sel_tmp6_fu_717_p2;
                sel_tmp9_reg_1425 <= sel_tmp9_fu_728_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_554_p2))) then
                idxCol_1_reg_1322 <= idxCol_1_fu_622_p3;
                idxRow_1_reg_1327 <= idxRow_1_fu_630_p3;
                phitmp_reg_1336 <= phitmp_fu_644_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then
                lineBuff_val_0_load_1_reg_1435 <= lineBuff_val_0_q1;
                lineBuff_val_1_load_1_reg_1445 <= lineBuff_val_1_q0;
                lineBuff_val_1_load_2_reg_1450 <= lineBuff_val_1_q1;
                lineBuff_val_2_load_1_reg_1460 <= lineBuff_val_2_q0;
                lineBuff_val_2_load_2_reg_1465 <= lineBuff_val_2_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_554_p2))) then
                lineBuff_val_1_addr_reg_1299 <= tmp_s_fu_560_p1(10 - 1 downto 0);
                lineBuff_val_2_addr_reg_1304 <= tmp_s_fu_560_p1(10 - 1 downto 0);
                or_cond_reg_1309 <= or_cond_fu_598_p2;
                tmp_11_reg_1317 <= tmp_11_fu_604_p2;
                tmp_12_reg_1332 <= tmp_12_fu_638_p2;
                    tmp_s_reg_1294(31 downto 0) <= tmp_s_fu_560_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then
                lineBuff_val_1_load_3_reg_1480 <= lineBuff_val_1_q1;
                lineBuff_val_2_load_3_reg_1485 <= lineBuff_val_2_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                pixConvolved_2_reg_1430 <= pixConvolved_2_fu_739_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_1290 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)))) then
                pixConvolved_3_reg_1371 <= pixConvolved_3_fu_675_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8)))) then
                reg_519 <= kernel_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)))) then
                reg_523 <= kernel_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then
                reg_532 <= kernel_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1))) then
                sel_tmp10_reg_1694 <= sel_tmp10_fu_1134_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                sel_tmp2_reg_1275 <= sel_tmp2_fu_536_p2;
                sel_tmp5_reg_1280 <= sel_tmp5_fu_542_p2;
                sel_tmp8_reg_1285 <= sel_tmp8_fu_548_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not((ap_const_lv1_0 = sel_tmp9_reg_1425)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                tmp1_reg_1624 <= tmp1_fu_995_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1)))) then
                tmp3_reg_1654 <= tmp3_fu_1041_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not((ap_const_lv1_0 = sel_tmp9_reg_1425)))) then
                tmp4_reg_1498 <= tmp4_fu_783_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5) and (ap_const_lv1_0 = sel_tmp9_reg_1425))) then
                tmp_14_reg_1490 <= tmp_14_fu_766_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and (ap_const_lv1_0 = sel_tmp9_reg_1425))) then
                tmp_15_reg_1503 <= tmp_15_fu_788_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7) and (ap_const_lv1_0 = sel_tmp9_reg_1425))) then
                tmp_16_reg_1516 <= tmp_16_fu_806_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_lv1_0 = sel_tmp9_reg_1425))) then
                tmp_17_reg_1535 <= tmp_17_fu_845_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9) and (ap_const_lv1_0 = sel_tmp9_reg_1425))) then
                tmp_18_reg_1560 <= tmp_18_fu_894_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = sel_tmp9_reg_1425))) then
                tmp_19_reg_1585 <= tmp_19_fu_931_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                tmp_20_reg_1610 <= tmp_20_fu_968_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                tmp_21_reg_1635 <= tmp_21_fu_1010_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1))) then
                tmp_22_reg_1665 <= tmp_22_fu_1056_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1)))) then
                tmp_6_reg_1684 <= valOutput_fu_1084_p2(15 downto 15);
                tmp_9_reg_1689 <= valOutput_fu_1084_p2(15 downto 3);
                valOutput_reg_1679 <= valOutput_fu_1084_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)))) then
                tmp_dest_V_1_reg_1365 <= inStream_TDEST;
                tmp_id_V_1_reg_1359 <= inStream_TID;
                tmp_keep_V_1_reg_1341 <= inStream_TKEEP;
                tmp_strb_V_1_reg_1347 <= inStream_TSTRB;
                tmp_user_V_1_reg_1353 <= inStream_TUSER;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                tmp_dest_V_reg_450 <= ap_reg_ppstg_tmp_dest_V_1_reg_1365_pp0_it1;
                tmp_id_V_reg_398 <= ap_reg_ppstg_tmp_id_V_1_reg_1359_pp0_it1;
                tmp_keep_V_reg_437 <= ap_reg_ppstg_tmp_keep_V_1_reg_1341_pp0_it1;
                tmp_strb_V_reg_424 <= ap_reg_ppstg_tmp_strb_V_1_reg_1347_pp0_it1;
                tmp_user_V_reg_411 <= ap_reg_ppstg_tmp_user_V_1_reg_1353_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and (ap_const_lv1_0 = sel_tmp6_reg_1420) and not((ap_const_lv1_0 = sel_tmp3_reg_1415)))) then
                valInWindow_0_maxVal_1_0_2_i_reg_1543 <= valInWindow_0_maxVal_1_0_2_i_fu_864_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and (ap_const_lv1_0 = sel_tmp6_reg_1420) and not((ap_const_lv1_0 = sel_tmp3_reg_1415)))) then
                valInWindow_0_maxVal_1_1_1_i_reg_1593 <= valInWindow_0_maxVal_1_1_1_i_fu_939_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and (ap_const_lv1_0 = sel_tmp6_reg_1420) and not((ap_const_lv1_0 = sel_tmp3_reg_1415)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                valInWindow_0_maxVal_1_1_2_i_reg_1618 <= valInWindow_0_maxVal_1_1_2_i_fu_976_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and (ap_const_lv1_0 = sel_tmp6_reg_1420) and not((ap_const_lv1_0 = sel_tmp3_reg_1415)))) then
                valInWindow_0_maxVal_1_1_i_reg_1568 <= valInWindow_0_maxVal_1_1_i_fu_902_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_sel_tmp6_reg_1420_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_sel_tmp3_reg_1415_pp0_it1)))) then
                valInWindow_0_maxVal_1_2_1_i_reg_1673 <= valInWindow_0_maxVal_1_2_1_i_fu_1064_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and (ap_const_lv1_0 = sel_tmp6_reg_1420) and not((ap_const_lv1_0 = sel_tmp3_reg_1415)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                valInWindow_0_maxVal_1_2_i_reg_1643 <= valInWindow_0_maxVal_1_2_i_fu_1018_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and not((ap_const_lv1_0 = sel_tmp6_reg_1420)))) then
                valInWindow_0_minVal_1_0_2_i_reg_1529 <= valInWindow_0_minVal_1_0_2_i_fu_838_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and not((ap_const_lv1_0 = sel_tmp6_reg_1420)))) then
                valInWindow_0_minVal_1_1_1_i_reg_1579 <= valInWindow_0_minVal_1_1_1_i_fu_925_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and not((ap_const_lv1_0 = sel_tmp6_reg_1420)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                valInWindow_0_minVal_1_1_2_i_reg_1604 <= valInWindow_0_minVal_1_1_2_i_fu_962_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and not((ap_const_lv1_0 = sel_tmp6_reg_1420)))) then
                valInWindow_0_minVal_1_1_i_reg_1554 <= valInWindow_0_minVal_1_1_i_fu_888_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_sel_tmp6_reg_1420_pp0_it1)))) then
                valInWindow_0_minVal_1_2_1_i_reg_1659 <= valInWindow_0_minVal_1_2_1_i_fu_1050_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_const_lv1_0 = sel_tmp9_reg_1425) and not((ap_const_lv1_0 = sel_tmp6_reg_1420)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                valInWindow_0_minVal_1_2_i_reg_1629 <= valInWindow_0_minVal_1_2_i_fu_1004_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then
                window_val_0_0_reg_1475 <= window_val_0_0_fu_760_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then
                window_val_0_2_reg_1511 <= window_val_0_2_fu_800_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8))) then
                window_val_1_0_reg_1524 <= window_val_1_0_fu_817_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9))) then
                window_val_1_1_reg_1549 <= window_val_1_1_fu_878_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then
                window_val_1_2_reg_1574 <= window_val_1_2_fu_915_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                window_val_2_0_reg_1599 <= window_val_2_0_fu_952_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then
                window_val_2_2_reg_1649 <= window_val_2_2_fu_1031_p2;
            end if;
        end if;
    end process;
    kernel_addr_reg_1230(3 downto 0) <= "0000";
    kernel_addr_1_reg_1235(3 downto 0) <= "0001";
    kernel_addr_2_reg_1240(3 downto 0) <= "0010";
    kernel_addr_3_reg_1245(3 downto 0) <= "0011";
    kernel_addr_4_reg_1250(3 downto 0) <= "0100";
    kernel_addr_5_reg_1255(3 downto 0) <= "0101";
    kernel_addr_6_reg_1260(3 downto 0) <= "0110";
    kernel_addr_7_reg_1265(3 downto 0) <= "0111";
    kernel_addr_8_reg_1270(3 downto 0) <= "1000";
    tmp_s_reg_1294(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_160, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_sig_ioackin_outStream_TREADY, exitcond1_fu_554_p2, exitcond_fu_1211_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond1_fu_554_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_10;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
            when ap_ST_pp0_stg4_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
            when ap_ST_pp0_stg5_fsm_6 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_7;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
                end if;
            when ap_ST_pp0_stg6_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_8;
            when ap_ST_pp0_stg7_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_9;
            when ap_ST_pp0_stg8_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st17_fsm_10 => 
                if ((not(((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) and not((ap_const_lv1_0 = exitcond_fu_1211_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((ap_const_lv1_0 = exitcond_fu_1211_p2) and not(((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_lv1_0 = exitcond_fu_1211_p2))))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_ioackin_outStream_TREADY, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and not(((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) and not((ap_const_lv1_0 = exitcond_fu_1211_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_ioackin_outStream_TREADY, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and not(((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) and not((ap_const_lv1_0 = exitcond_fu_1211_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_1214 assign process. --
    ap_sig_bdd_1214_assign_proc : process(ap_reg_ppiten_pp0_it0, exitcond1_reg_1290)
    begin
                ap_sig_bdd_1214 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(inStream_TVALID, exitcond1_reg_1290)
    begin
                ap_sig_bdd_160 <= ((inStream_TVALID = ap_const_logic_0) and (exitcond1_reg_1290 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_172 assign process. --
    ap_sig_bdd_172_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_172 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_193 assign process. --
    ap_sig_bdd_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_193 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_222 assign process. --
    ap_sig_bdd_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_222 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_234 assign process. --
    ap_sig_bdd_234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_234 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_255 assign process. --
    ap_sig_bdd_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_255 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_522 assign process. --
    ap_sig_bdd_522_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_522 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_255)
    begin
        if (ap_sig_bdd_255) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_193)
    begin
        if (ap_sig_bdd_193) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_234)
    begin
        if (ap_sig_bdd_234) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_5_assign_proc : process(ap_sig_bdd_172)
    begin
        if (ap_sig_bdd_172) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_6_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_7_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_8_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg8_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg8_fsm_9_assign_proc : process(ap_sig_bdd_222)
    begin
        if (ap_sig_bdd_222) then 
            ap_sig_cseq_ST_pp0_stg8_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg8_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_10 assign process. --
    ap_sig_cseq_ST_st17_fsm_10_assign_proc : process(ap_sig_bdd_522)
    begin
        if (ap_sig_bdd_522) then 
            ap_sig_cseq_ST_st17_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_outStream_TREADY assign process. --
    ap_sig_ioackin_outStream_TREADY_assign_proc : process(outStream_TREADY, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)) then 
            ap_sig_ioackin_outStream_TREADY <= outStream_TREADY;
        else 
            ap_sig_ioackin_outStream_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    col_assign_1_0_2_fu_694_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(pixConvolved_reg_485));

    -- col_assign_phi_fu_467_p4 assign process. --
    col_assign_phi_fu_467_p4_assign_proc : process(col_assign_reg_463, exitcond1_reg_1290, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1, idxCol_1_reg_1322)
    begin
        if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            col_assign_phi_fu_467_p4 <= idxCol_1_reg_1322;
        else 
            col_assign_phi_fu_467_p4 <= col_assign_reg_463;
        end if; 
    end process;

    countWait_2_fu_1217_p2 <= std_logic_vector(unsigned(countWait_1_reg_508) + unsigned(ap_const_lv10_1));

    -- countWait_phi_fu_501_p4 assign process. --
    countWait_phi_fu_501_p4_assign_proc : process(countWait_reg_497, exitcond1_reg_1290, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1, phitmp_reg_1336)
    begin
        if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            countWait_phi_fu_501_p4 <= phitmp_reg_1336;
        else 
            countWait_phi_fu_501_p4 <= countWait_reg_497;
        end if; 
    end process;

    doImgProc_CRTL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    doImgProc_KERNEL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond1_fu_554_p2 <= "1" when (countWait_phi_fu_501_p4 = ap_const_lv19_4AC41) else "0";
    exitcond_fu_1211_p2 <= "1" when (countWait_1_reg_508 = ap_const_lv10_2B9) else "0";
    icmp4_fu_592_p2 <= "1" when (signed(tmp_4_fu_582_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_576_p2 <= "1" when (signed(tmp_3_fu_566_p4) > signed(ap_const_lv31_0)) else "0";
    idxCol_1_fu_622_p3 <= 
        idxCol_fu_610_p2 when (tmp_11_fu_604_p2(0) = '1') else 
        ap_const_lv32_0;
    idxCol_fu_610_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(col_assign_phi_fu_467_p4));
    idxRow_1_fu_630_p3 <= 
        idxRow_phi_fu_478_p4 when (tmp_11_fu_604_p2(0) = '1') else 
        idxRow_2_fu_616_p2;
    idxRow_2_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(idxRow_phi_fu_478_p4));

    -- idxRow_phi_fu_478_p4 assign process. --
    idxRow_phi_fu_478_p4_assign_proc : process(idxRow_reg_474, exitcond1_reg_1290, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1, idxRow_1_reg_1327)
    begin
        if (((exitcond1_reg_1290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            idxRow_phi_fu_478_p4 <= idxRow_1_reg_1327;
        else 
            idxRow_phi_fu_478_p4 <= idxRow_reg_474;
        end if; 
    end process;


    -- inStream_TREADY assign process. --
    inStream_TREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, exitcond1_reg_1290, ap_sig_bdd_160)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))))) then 
            inStream_TREADY <= ap_const_logic_1;
        else 
            inStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    kernel_addr_1_gep_fu_223_p3 <= ap_const_lv64_1(4 - 1 downto 0);
    kernel_addr_2_gep_fu_231_p3 <= ap_const_lv64_2(4 - 1 downto 0);
    kernel_addr_3_gep_fu_239_p3 <= ap_const_lv64_3(4 - 1 downto 0);
    kernel_addr_4_gep_fu_247_p3 <= ap_const_lv64_4(4 - 1 downto 0);
    kernel_addr_5_gep_fu_255_p3 <= ap_const_lv64_5(4 - 1 downto 0);
    kernel_addr_6_gep_fu_263_p3 <= ap_const_lv64_6(4 - 1 downto 0);
    kernel_addr_7_gep_fu_271_p3 <= ap_const_lv64_7(4 - 1 downto 0);
    kernel_addr_8_gep_fu_279_p3 <= ap_const_lv64_8(4 - 1 downto 0);
    kernel_addr_gep_fu_215_p3 <= ap_const_lv64_0(4 - 1 downto 0);

    -- kernel_address0 assign process. --
    kernel_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg0_fsm_1, kernel_addr_reg_1230, kernel_addr_1_reg_1235, kernel_addr_2_reg_1240, kernel_addr_3_reg_1245, kernel_addr_4_reg_1250, kernel_addr_5_reg_1255, kernel_addr_6_reg_1260, kernel_addr_7_reg_1265, kernel_addr_8_reg_1270)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) then 
                kernel_address0 <= kernel_addr_8_reg_1270;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8)) then 
                kernel_address0 <= kernel_addr_7_reg_1265;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) then 
                kernel_address0 <= kernel_addr_6_reg_1260;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) then 
                kernel_address0 <= kernel_addr_5_reg_1255;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) then 
                kernel_address0 <= kernel_addr_4_reg_1250;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                kernel_address0 <= kernel_addr_3_reg_1245;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                kernel_address0 <= kernel_addr_2_reg_1240;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                kernel_address0 <= kernel_addr_1_reg_1235;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                kernel_address0 <= kernel_addr_reg_1230;
            else 
                kernel_address0 <= "XXXX";
            end if;
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    -- kernel_ce0 assign process. --
    kernel_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_160, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_5, ap_sig_cseq_ST_pp0_stg7_fsm_8, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_sig_ioackin_outStream_TREADY, ap_sig_cseq_ST_pp0_stg8_fsm_9, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuff_val_0_address0 assign process. --
    lineBuff_val_0_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, tmp_s_reg_1294, tmp_7_fu_681_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                lineBuff_val_0_address0 <= tmp_s_reg_1294(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                lineBuff_val_0_address0 <= tmp_7_fu_681_p1(10 - 1 downto 0);
            else 
                lineBuff_val_0_address0 <= "XXXXXXXXXX";
            end if;
        else 
            lineBuff_val_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- lineBuff_val_0_address1 assign process. --
    lineBuff_val_0_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_25_0_1_fu_688_p1, tmp_25_0_2_fu_746_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                lineBuff_val_0_address1 <= tmp_25_0_2_fu_746_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                lineBuff_val_0_address1 <= tmp_25_0_1_fu_688_p1(10 - 1 downto 0);
            else 
                lineBuff_val_0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            lineBuff_val_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- lineBuff_val_0_ce0 assign process. --
    lineBuff_val_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_160, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            lineBuff_val_0_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuff_val_0_ce1 assign process. --
    lineBuff_val_0_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            lineBuff_val_0_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lineBuff_val_0_d0 <= lineBuff_val_1_q0;

    -- lineBuff_val_0_we0 assign process. --
    lineBuff_val_0_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, exitcond1_reg_1290, ap_sig_bdd_160)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))))) then 
            lineBuff_val_0_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuff_val_1_address0 assign process. --
    lineBuff_val_1_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_s_fu_560_p1, lineBuff_val_1_addr_reg_1299, tmp_7_fu_681_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                lineBuff_val_1_address0 <= lineBuff_val_1_addr_reg_1299;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                lineBuff_val_1_address0 <= tmp_7_fu_681_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                lineBuff_val_1_address0 <= tmp_s_fu_560_p1(10 - 1 downto 0);
            else 
                lineBuff_val_1_address0 <= "XXXXXXXXXX";
            end if;
        else 
            lineBuff_val_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- lineBuff_val_1_address1 assign process. --
    lineBuff_val_1_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_25_0_1_fu_688_p1, tmp_25_0_2_fu_746_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                lineBuff_val_1_address1 <= tmp_25_0_2_fu_746_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                lineBuff_val_1_address1 <= tmp_25_0_1_fu_688_p1(10 - 1 downto 0);
            else 
                lineBuff_val_1_address1 <= "XXXXXXXXXX";
            end if;
        else 
            lineBuff_val_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- lineBuff_val_1_ce0 assign process. --
    lineBuff_val_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_160, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then 
            lineBuff_val_1_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuff_val_1_ce1 assign process. --
    lineBuff_val_1_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            lineBuff_val_1_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lineBuff_val_1_d0 <= lineBuff_val_2_q0;

    -- lineBuff_val_1_we0 assign process. --
    lineBuff_val_1_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, exitcond1_reg_1290, ap_sig_bdd_160)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))))) then 
            lineBuff_val_1_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuff_val_2_address0 assign process. --
    lineBuff_val_2_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_s_fu_560_p1, lineBuff_val_2_addr_reg_1304, tmp_7_fu_681_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                lineBuff_val_2_address0 <= lineBuff_val_2_addr_reg_1304;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                lineBuff_val_2_address0 <= tmp_7_fu_681_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                lineBuff_val_2_address0 <= tmp_s_fu_560_p1(10 - 1 downto 0);
            else 
                lineBuff_val_2_address0 <= "XXXXXXXXXX";
            end if;
        else 
            lineBuff_val_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- lineBuff_val_2_address1 assign process. --
    lineBuff_val_2_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_25_0_1_fu_688_p1, tmp_25_0_2_fu_746_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                lineBuff_val_2_address1 <= tmp_25_0_2_fu_746_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                lineBuff_val_2_address1 <= tmp_25_0_1_fu_688_p1(10 - 1 downto 0);
            else 
                lineBuff_val_2_address1 <= "XXXXXXXXXX";
            end if;
        else 
            lineBuff_val_2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- lineBuff_val_2_ce0 assign process. --
    lineBuff_val_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_160, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then 
            lineBuff_val_2_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuff_val_2_ce1 assign process. --
    lineBuff_val_2_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            lineBuff_val_2_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lineBuff_val_2_d0 <= inStream_TDATA;

    -- lineBuff_val_2_we0 assign process. --
    lineBuff_val_2_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, exitcond1_reg_1290, ap_sig_bdd_160)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_1290 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_160))))) then 
            lineBuff_val_2_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_598_p2 <= (icmp_fu_576_p2 and icmp4_fu_592_p2);

    -- outStream_TDATA assign process. --
    outStream_TDATA_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2, tmp_data_V_fu_1204_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) then 
            outStream_TDATA <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)))) then 
            outStream_TDATA <= tmp_data_V_fu_1204_p3;
        else 
            outStream_TDATA <= "XXXXXXXX";
        end if; 
    end process;


    -- outStream_TDEST assign process. --
    outStream_TDEST_assign_proc : process(tmp_dest_V_reg_450, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_reg_ppstg_tmp_dest_V_1_reg_1365_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) then 
            outStream_TDEST <= tmp_dest_V_reg_450;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)))) then 
            outStream_TDEST <= ap_reg_ppstg_tmp_dest_V_1_reg_1365_pp0_it1;
        else 
            outStream_TDEST <= "X";
        end if; 
    end process;


    -- outStream_TID assign process. --
    outStream_TID_assign_proc : process(tmp_id_V_reg_398, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_reg_ppstg_tmp_id_V_1_reg_1359_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) then 
            outStream_TID <= tmp_id_V_reg_398;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)))) then 
            outStream_TID <= ap_reg_ppstg_tmp_id_V_1_reg_1359_pp0_it1;
        else 
            outStream_TID <= "X";
        end if; 
    end process;


    -- outStream_TKEEP assign process. --
    outStream_TKEEP_assign_proc : process(tmp_keep_V_reg_437, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_reg_ppstg_tmp_keep_V_1_reg_1341_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) then 
            outStream_TKEEP <= tmp_keep_V_reg_437;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)))) then 
            outStream_TKEEP <= ap_reg_ppstg_tmp_keep_V_1_reg_1341_pp0_it1;
        else 
            outStream_TKEEP <= "X";
        end if; 
    end process;


    -- outStream_TLAST assign process. --
    outStream_TLAST_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2, tmp_last_V_fu_1223_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) then 
            outStream_TLAST <= tmp_last_V_fu_1223_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)))) then 
            outStream_TLAST <= ap_const_lv1_0;
        else 
            outStream_TLAST <= "X";
        end if; 
    end process;


    -- outStream_TSTRB assign process. --
    outStream_TSTRB_assign_proc : process(tmp_strb_V_reg_424, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_reg_ppstg_tmp_strb_V_1_reg_1347_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) then 
            outStream_TSTRB <= tmp_strb_V_reg_424;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)))) then 
            outStream_TSTRB <= ap_reg_ppstg_tmp_strb_V_1_reg_1347_pp0_it1;
        else 
            outStream_TSTRB <= "X";
        end if; 
    end process;


    -- outStream_TUSER assign process. --
    outStream_TUSER_assign_proc : process(tmp_user_V_reg_411, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_reg_ppstg_tmp_user_V_1_reg_1353_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2))) then 
            outStream_TUSER <= tmp_user_V_reg_411;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)))) then 
            outStream_TUSER <= ap_reg_ppstg_tmp_user_V_1_reg_1353_pp0_it1;
        else 
            outStream_TUSER <= "X";
        end if; 
    end process;


    -- outStream_TVALID assign process. --
    outStream_TVALID_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_reg_ppstg_tmp_12_reg_1332_pp0_it1, ap_sig_cseq_ST_st17_fsm_10, exitcond_fu_1211_p2, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1332_pp0_it1)) and (ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_10) and (ap_const_lv1_0 = exitcond_fu_1211_p2) and (ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_neg_fu_1144_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(tmp_18_tr_fu_1141_p1));
    p_s_fu_1196_p3 <= 
        ap_const_lv8_0 when (tmp_13_fu_1188_p3(0) = '1') else 
        tmp_10_fu_1184_p1;
    phitmp_fu_644_p2 <= std_logic_vector(unsigned(countWait_phi_fu_501_p4) + unsigned(ap_const_lv19_1));
    pixConvolved_1_fu_732_p3 <= 
        pixConvolved_3_reg_1371 when (sel_tmp9_fu_728_p2(0) = '1') else 
        sel_tmp7_fu_721_p3;
    pixConvolved_2_fu_739_p3 <= 
        pixConvolved_1_fu_732_p3 when (tmp_11_reg_1317(0) = '1') else 
        ap_const_lv32_0;
    pixConvolved_3_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(pixConvolved_phi_fu_489_p4));

    -- pixConvolved_phi_fu_489_p4 assign process. --
    pixConvolved_phi_fu_489_p4_assign_proc : process(pixConvolved_reg_485, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_1290_pp0_it1, pixConvolved_2_reg_1430)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1290_pp0_it1))) then 
            pixConvolved_phi_fu_489_p4 <= pixConvolved_2_reg_1430;
        else 
            pixConvolved_phi_fu_489_p4 <= pixConvolved_reg_485;
        end if; 
    end process;

    sel_tmp10_fu_1134_p3 <= 
        valInWindow_0_minVal_1_2_2_i_fu_1111_p3 when (ap_reg_ppstg_sel_tmp6_reg_1420_pp0_it1(0) = '1') else 
        sel_tmp_fu_1127_p3;
    sel_tmp1_fu_700_p3 <= 
        pixConvolved_3_reg_1371 when (or_cond_reg_1309(0) = '1') else 
        pixConvolved_reg_485;
    sel_tmp2_fu_536_p2 <= "1" when (operation = ap_const_lv32_2) else "0";
    sel_tmp3_fu_706_p2 <= (or_cond_reg_1309 and sel_tmp2_reg_1275);
    sel_tmp4_fu_710_p3 <= 
        pixConvolved_3_reg_1371 when (sel_tmp3_fu_706_p2(0) = '1') else 
        sel_tmp1_fu_700_p3;
    sel_tmp5_fu_542_p2 <= "1" when (operation = ap_const_lv32_1) else "0";
    sel_tmp6_fu_717_p2 <= (or_cond_reg_1309 and sel_tmp5_reg_1280);
    sel_tmp7_fu_721_p3 <= 
        pixConvolved_3_reg_1371 when (sel_tmp6_fu_717_p2(0) = '1') else 
        sel_tmp4_fu_710_p3;
    sel_tmp8_fu_548_p2 <= "1" when (operation = ap_const_lv32_0) else "0";
    sel_tmp9_fu_728_p2 <= (or_cond_reg_1309 and sel_tmp8_reg_1285);
    sel_tmp_fu_1127_p3 <= 
        valInWindow_0_maxVal_1_2_2_i_fu_1121_p3 when (ap_reg_ppstg_sel_tmp3_reg_1415_pp0_it1(0) = '1') else 
        ap_const_lv8_0;
    tmp1_fu_995_p2 <= std_logic_vector(unsigned(window_val_2_1_fu_989_p2) + unsigned(window_val_2_0_reg_1599));
    tmp2_fu_1037_p2 <= std_logic_vector(unsigned(window_val_1_1_reg_1549) + unsigned(window_val_1_2_reg_1574));
    tmp3_fu_1041_p2 <= std_logic_vector(unsigned(tmp1_reg_1624) + unsigned(tmp2_fu_1037_p2));
    tmp4_fu_783_p2 <= std_logic_vector(unsigned(window_val_0_0_reg_1475) + unsigned(window_val_0_1_fu_777_p2));
    tmp5_fu_1070_p2 <= std_logic_vector(unsigned(window_val_2_2_reg_1649) + unsigned(window_val_0_2_reg_1511));
    tmp6_fu_1074_p2 <= std_logic_vector(unsigned(window_val_1_0_reg_1524) + unsigned(tmp5_fu_1070_p2));
    tmp7_fu_1079_p2 <= std_logic_vector(unsigned(tmp4_reg_1498) + unsigned(tmp6_fu_1074_p2));
    tmp_10_cast_fu_1173_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_1164_p1),15));
    tmp_10_fu_1184_p1 <= valOutput_1_fu_1177_p3(8 - 1 downto 0);
    tmp_11_0_1_i_fu_849_p2 <= "1" when (unsigned(tmp_15_reg_1503) > unsigned(tmp_14_reg_1490)) else "0";
    tmp_11_0_2_i_fu_859_p2 <= "1" when (unsigned(tmp_16_reg_1516) > unsigned(valInWindow_0_maxVal_1_0_1_i_fu_853_p3)) else "0";
    tmp_11_1_1_i_fu_935_p2 <= "1" when (unsigned(tmp_18_reg_1560) > unsigned(valInWindow_0_maxVal_1_1_i_reg_1568)) else "0";
    tmp_11_1_2_i_fu_972_p2 <= "1" when (unsigned(tmp_19_reg_1585) > unsigned(valInWindow_0_maxVal_1_1_1_i_reg_1593)) else "0";
    tmp_11_1_i_fu_898_p2 <= "1" when (unsigned(tmp_17_reg_1535) > unsigned(valInWindow_0_maxVal_1_0_2_i_reg_1543)) else "0";
    tmp_11_2_1_i_fu_1060_p2 <= "1" when (unsigned(tmp_21_reg_1635) > unsigned(valInWindow_0_maxVal_1_2_i_reg_1643)) else "0";
    tmp_11_2_2_i_fu_1117_p2 <= "1" when (unsigned(tmp_22_reg_1665) > unsigned(valInWindow_0_maxVal_1_2_1_i_reg_1673)) else "0";
    tmp_11_2_i_fu_1014_p2 <= "1" when (unsigned(tmp_20_reg_1610) > unsigned(valInWindow_0_maxVal_1_1_2_i_reg_1618)) else "0";
    tmp_11_fu_604_p2 <= "1" when (signed(col_assign_phi_fu_467_p4) < signed(ap_const_lv32_2B7)) else "0";
    tmp_12_fu_638_p2 <= "1" when (unsigned(countWait_phi_fu_501_p4) > unsigned(ap_const_lv19_2B9)) else "0";
    tmp_13_fu_1188_p3 <= valOutput_1_fu_1177_p3(14 downto 14);
    tmp_14_fu_766_p1 <= window_val_0_0_fu_760_p2(8 - 1 downto 0);
    tmp_15_fu_788_p1 <= window_val_0_1_fu_777_p2(8 - 1 downto 0);
    tmp_16_fu_806_p1 <= window_val_0_2_fu_800_p2(8 - 1 downto 0);
    tmp_17_fu_845_p1 <= window_val_1_0_fu_817_p2(8 - 1 downto 0);
    tmp_18_fu_894_p1 <= window_val_1_1_fu_878_p2(8 - 1 downto 0);
        tmp_18_tr_fu_1141_p1 <= std_logic_vector(resize(signed(valOutput_reg_1679),17));

    tmp_19_fu_931_p1 <= window_val_1_2_fu_915_p2(8 - 1 downto 0);
        tmp_1_fu_1164_p1 <= std_logic_vector(resize(signed(tmp_9_reg_1689),14));

    tmp_20_fu_968_p1 <= window_val_2_0_fu_952_p2(8 - 1 downto 0);
    tmp_21_fu_1010_p1 <= window_val_2_1_fu_989_p2(8 - 1 downto 0);
    tmp_22_fu_1056_p1 <= window_val_2_2_fu_1031_p2(8 - 1 downto 0);
    tmp_25_0_1_fu_688_p1 <= std_logic_vector(resize(unsigned(pixConvolved_3_reg_1371),64));
    tmp_25_0_2_fu_746_p1 <= std_logic_vector(resize(unsigned(col_assign_1_0_2_reg_1390),64));
    tmp_2_fu_1167_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(tmp_7_cast_fu_1160_p1));
    tmp_3_fu_566_p4 <= idxRow_phi_fu_478_p4(31 downto 1);
    tmp_4_fu_582_p4 <= col_assign_phi_fu_467_p4(31 downto 1);
    tmp_5_0_1_i_fu_823_p2 <= "1" when (unsigned(tmp_15_reg_1503) < unsigned(tmp_14_reg_1490)) else "0";
    tmp_5_0_2_i_fu_833_p2 <= "1" when (unsigned(tmp_16_reg_1516) < unsigned(valInWindow_0_minVal_1_0_1_i_fu_827_p3)) else "0";
    tmp_5_1_1_i_fu_921_p2 <= "1" when (unsigned(tmp_18_reg_1560) < unsigned(valInWindow_0_minVal_1_1_i_reg_1554)) else "0";
    tmp_5_1_2_i_fu_958_p2 <= "1" when (unsigned(tmp_19_reg_1585) < unsigned(valInWindow_0_minVal_1_1_1_i_reg_1579)) else "0";
    tmp_5_1_i_fu_884_p2 <= "1" when (unsigned(tmp_17_reg_1535) < unsigned(valInWindow_0_minVal_1_0_2_i_reg_1529)) else "0";
    tmp_5_2_1_i_fu_1046_p2 <= "1" when (unsigned(tmp_21_reg_1635) < unsigned(valInWindow_0_minVal_1_2_i_reg_1629)) else "0";
    tmp_5_2_2_i_fu_1107_p2 <= "1" when (unsigned(tmp_22_reg_1665) < unsigned(valInWindow_0_minVal_1_2_1_i_reg_1659)) else "0";
    tmp_5_2_i_fu_1000_p2 <= "1" when (unsigned(tmp_20_reg_1610) < unsigned(valInWindow_0_minVal_1_1_2_i_reg_1604)) else "0";
    tmp_7_cast_fu_1160_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_1150_p4),15));
    tmp_7_fu_681_p1 <= std_logic_vector(resize(unsigned(pixConvolved_reg_485),64));
    tmp_8_fu_1150_p4 <= p_neg_fu_1144_p2(16 downto 3);
    tmp_data_V_fu_1204_p3 <= 
        p_s_fu_1196_p3 when (ap_reg_ppstg_sel_tmp9_reg_1425_pp0_it1(0) = '1') else 
        sel_tmp10_reg_1694;
    tmp_last_V_fu_1223_p2 <= "1" when (unsigned(countWait_1_reg_508) > unsigned(ap_const_lv10_2B7)) else "0";
    tmp_s_fu_560_p1 <= std_logic_vector(resize(unsigned(col_assign_phi_fu_467_p4),64));
    valInWindow_0_maxVal_1_0_1_i_fu_853_p3 <= 
        tmp_15_reg_1503 when (tmp_11_0_1_i_fu_849_p2(0) = '1') else 
        tmp_14_reg_1490;
    valInWindow_0_maxVal_1_0_2_i_fu_864_p3 <= 
        tmp_16_reg_1516 when (tmp_11_0_2_i_fu_859_p2(0) = '1') else 
        valInWindow_0_maxVal_1_0_1_i_fu_853_p3;
    valInWindow_0_maxVal_1_1_1_i_fu_939_p3 <= 
        tmp_18_reg_1560 when (tmp_11_1_1_i_fu_935_p2(0) = '1') else 
        valInWindow_0_maxVal_1_1_i_reg_1568;
    valInWindow_0_maxVal_1_1_2_i_fu_976_p3 <= 
        tmp_19_reg_1585 when (tmp_11_1_2_i_fu_972_p2(0) = '1') else 
        valInWindow_0_maxVal_1_1_1_i_reg_1593;
    valInWindow_0_maxVal_1_1_i_fu_902_p3 <= 
        tmp_17_reg_1535 when (tmp_11_1_i_fu_898_p2(0) = '1') else 
        valInWindow_0_maxVal_1_0_2_i_reg_1543;
    valInWindow_0_maxVal_1_2_1_i_fu_1064_p3 <= 
        tmp_21_reg_1635 when (tmp_11_2_1_i_fu_1060_p2(0) = '1') else 
        valInWindow_0_maxVal_1_2_i_reg_1643;
    valInWindow_0_maxVal_1_2_2_i_fu_1121_p3 <= 
        tmp_22_reg_1665 when (tmp_11_2_2_i_fu_1117_p2(0) = '1') else 
        valInWindow_0_maxVal_1_2_1_i_reg_1673;
    valInWindow_0_maxVal_1_2_i_fu_1018_p3 <= 
        tmp_20_reg_1610 when (tmp_11_2_i_fu_1014_p2(0) = '1') else 
        valInWindow_0_maxVal_1_1_2_i_reg_1618;
    valInWindow_0_minVal_1_0_1_i_fu_827_p3 <= 
        tmp_15_reg_1503 when (tmp_5_0_1_i_fu_823_p2(0) = '1') else 
        tmp_14_reg_1490;
    valInWindow_0_minVal_1_0_2_i_fu_838_p3 <= 
        tmp_16_reg_1516 when (tmp_5_0_2_i_fu_833_p2(0) = '1') else 
        valInWindow_0_minVal_1_0_1_i_fu_827_p3;
    valInWindow_0_minVal_1_1_1_i_fu_925_p3 <= 
        tmp_18_reg_1560 when (tmp_5_1_1_i_fu_921_p2(0) = '1') else 
        valInWindow_0_minVal_1_1_i_reg_1554;
    valInWindow_0_minVal_1_1_2_i_fu_962_p3 <= 
        tmp_19_reg_1585 when (tmp_5_1_2_i_fu_958_p2(0) = '1') else 
        valInWindow_0_minVal_1_1_1_i_reg_1579;
    valInWindow_0_minVal_1_1_i_fu_888_p3 <= 
        tmp_17_reg_1535 when (tmp_5_1_i_fu_884_p2(0) = '1') else 
        valInWindow_0_minVal_1_0_2_i_reg_1529;
    valInWindow_0_minVal_1_2_1_i_fu_1050_p3 <= 
        tmp_21_reg_1635 when (tmp_5_2_1_i_fu_1046_p2(0) = '1') else 
        valInWindow_0_minVal_1_2_i_reg_1629;
    valInWindow_0_minVal_1_2_2_i_fu_1111_p3 <= 
        tmp_22_reg_1665 when (tmp_5_2_2_i_fu_1107_p2(0) = '1') else 
        valInWindow_0_minVal_1_2_1_i_reg_1659;
    valInWindow_0_minVal_1_2_i_fu_1004_p3 <= 
        tmp_20_reg_1610 when (tmp_5_2_i_fu_1000_p2(0) = '1') else 
        valInWindow_0_minVal_1_1_2_i_reg_1604;
    valOutput_1_fu_1177_p3 <= 
        tmp_2_fu_1167_p2 when (tmp_6_reg_1684(0) = '1') else 
        tmp_10_cast_fu_1173_p1;
    valOutput_fu_1084_p2 <= std_logic_vector(unsigned(tmp3_reg_1654) + unsigned(tmp7_fu_1079_p2));
    window_val_0_0_fu_760_p0 <= reg_519;
    window_val_0_0_fu_760_p1 <= window_val_0_0_fu_760_p10(8 - 1 downto 0);
    window_val_0_0_fu_760_p10 <= std_logic_vector(resize(unsigned(reg_527),16));
    window_val_0_0_fu_760_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_0_0_fu_760_p0) * signed('0' &window_val_0_0_fu_760_p1))), 16));
    window_val_0_1_fu_777_p0 <= reg_523;
    window_val_0_1_fu_777_p1 <= window_val_0_1_fu_777_p10(8 - 1 downto 0);
    window_val_0_1_fu_777_p10 <= std_logic_vector(resize(unsigned(lineBuff_val_0_load_1_reg_1435),16));
    window_val_0_1_fu_777_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_0_1_fu_777_p0) * signed('0' &window_val_0_1_fu_777_p1))), 16));
    window_val_0_2_fu_800_p0 <= reg_532;
    window_val_0_2_fu_800_p1 <= window_val_0_2_fu_800_p10(8 - 1 downto 0);
    window_val_0_2_fu_800_p10 <= std_logic_vector(resize(unsigned(reg_527),16));
    window_val_0_2_fu_800_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_0_2_fu_800_p0) * signed('0' &window_val_0_2_fu_800_p1))), 16));
    window_val_1_0_fu_817_p0 <= reg_519;
    window_val_1_0_fu_817_p1 <= window_val_1_0_fu_817_p10(8 - 1 downto 0);
    window_val_1_0_fu_817_p10 <= std_logic_vector(resize(unsigned(lineBuff_val_1_load_1_reg_1445),16));
    window_val_1_0_fu_817_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_1_0_fu_817_p0) * signed('0' &window_val_1_0_fu_817_p1))), 16));
    window_val_1_1_fu_878_p0 <= reg_523;
    window_val_1_1_fu_878_p1 <= window_val_1_1_fu_878_p10(8 - 1 downto 0);
    window_val_1_1_fu_878_p10 <= std_logic_vector(resize(unsigned(lineBuff_val_1_load_2_reg_1450),16));
    window_val_1_1_fu_878_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_1_1_fu_878_p0) * signed('0' &window_val_1_1_fu_878_p1))), 16));
    window_val_1_2_fu_915_p0 <= reg_532;
    window_val_1_2_fu_915_p1 <= window_val_1_2_fu_915_p10(8 - 1 downto 0);
    window_val_1_2_fu_915_p10 <= std_logic_vector(resize(unsigned(lineBuff_val_1_load_3_reg_1480),16));
    window_val_1_2_fu_915_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_1_2_fu_915_p0) * signed('0' &window_val_1_2_fu_915_p1))), 16));
    window_val_2_0_fu_952_p0 <= reg_519;
    window_val_2_0_fu_952_p1 <= window_val_2_0_fu_952_p10(8 - 1 downto 0);
    window_val_2_0_fu_952_p10 <= std_logic_vector(resize(unsigned(lineBuff_val_2_load_1_reg_1460),16));
    window_val_2_0_fu_952_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_2_0_fu_952_p0) * signed('0' &window_val_2_0_fu_952_p1))), 16));
    window_val_2_1_fu_989_p0 <= reg_523;
    window_val_2_1_fu_989_p1 <= window_val_2_1_fu_989_p10(8 - 1 downto 0);
    window_val_2_1_fu_989_p10 <= std_logic_vector(resize(unsigned(lineBuff_val_2_load_2_reg_1465),16));
    window_val_2_1_fu_989_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_2_1_fu_989_p0) * signed('0' &window_val_2_1_fu_989_p1))), 16));
    window_val_2_2_fu_1031_p0 <= reg_532;
    window_val_2_2_fu_1031_p1 <= window_val_2_2_fu_1031_p10(8 - 1 downto 0);
    window_val_2_2_fu_1031_p10 <= std_logic_vector(resize(unsigned(lineBuff_val_2_load_3_reg_1485),16));
    window_val_2_2_fu_1031_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(window_val_2_2_fu_1031_p0) * signed('0' &window_val_2_2_fu_1031_p1))), 16));
end behav;
